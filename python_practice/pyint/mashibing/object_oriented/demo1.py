# -*- coding: UTF-8 -*-# 类对象class Person(object):    # __slots__ = ('name','gender','age','introduce')    # 类属性    # 对实例对象动态绑定的属性和方法进行限制    # 而且一旦使用了__slots__，则__dict__就不能再使用了    def __init__(self,name,age):        self.name = name        self.age = age    def show(self):        print(self.name,self.age)    # 类方法有cls类对象本身这个参数    @classmethod    def cm(cls):        print(' 我是Person类对象的classmethod')    # 静态方法没有参数    @staticmethod    def sm():        print('我是Person类对象的staticmethod')    def __str__(self):        return self.name+'\t'+str(self.age)if __name__ == '__main__':    p1 = Person('zhang3',18)    p2 = Person('li4',20)    p1.show()    # show方法只存在于类对象中，实例对象中没有，不过实例对象可以调用类对象中的show方法，因为实例对象有指向类对象的指针    # name，age属性只存在于实例对象中，类对象中没有    p2.gender = 'male'# 实例对象创建之后，动态的为其绑定新属性    # 动态绑定的属性必须在类对象的__slots__中，否则会报错    print(p2.gender)    from types import MethodType    def introduce(self):        print('name: {0} age: {1}'.format(self.name,self.age))    p2.introduce = MethodType(introduce,p2)    p2.introduce()    print(dir(Person))    print(dir(p1))    print(dir(p2))    print(p2)    # object对象的特殊属性__dict__    # 获取实例对象的属性字典    print(p1.__dict__)    print(p2.__dict__)    pass