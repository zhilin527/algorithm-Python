# -*- coding: UTF-8 -*-with open('logo.png','rb') as f1:    with open('logo1.png','wb') as f2:        f2.write(f1.read())print(type(f1))print(type(f2))# with+上下文管理器# with只是执行上下文管理器的语法# with后面的是上下文管理器# 如果一个类实现了特殊方法__enter()__和__exit__()。那么就称为遵守了上下文管理协议# BufferReader一定实现了enter和exit方法# 同时这个类对象实例称为上下文管理器import _ioprint(_io.BufferedReader)class MyClass(object):#蹲守上下文管理协议    def __enter__(self):        print('特殊方法__enter__()被调用了')        return self    def __exit__(self, exc_type, exc_val, exc_tb):        print('特殊方法__exit__()被调用了')    def show(self):        print('show()被调用了')with MyClass() as mc:    mc.show()# with语句会让上下文管理器创建一个运行时上下文# ->当进入运行时上下文时自动调用__enter__()方法,得到一个上下文管理器对象，赋值给mc# ->接着执行with里面的语句块# ->称为离开运行时上下文，自动调用上下文管理器自动调用特殊方法__exit__()##