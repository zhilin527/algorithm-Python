#单元测试#1。nose/pytest较为常见#2。mock模块用来模拟替换网络请求#3。coverage统计单元测试覆盖率def binary_search(array,target):    if not array:        return -1    beg,end = 0,len(array)    while beg < end:        mid = beg + (end-beg)//2        if array[mid] == target:            return mid        elif array[mid] > target:            end = mid        else:            beg = mid+1    return -1def test():    '''    如何设计测试用例：等价类划分    -正常值功能测试    -边界值    -异常值，None，空值，非法值    :return:     '''    #正常值，包含有和无两种结果    assert binary_search([0,1,2,3,4,5],1) == 1    assert binary_search([0,1,2,3,4,5],6) == -1    assert binary_search([0,1,2,3,4,5],-1) == -1    #边界值    assert binary_search([0,1,2,3,4,5],0) == -1    assert binary_search([0,1,2,3,4,5],5) == 0    assert binary_search([0],0) == 0    #异常值    assert binary_search([],1) == -1#！！！！！#深拷贝，浅拷贝#python中如何正确初始化一个二维数组