#monkey_patch,运行时类型替换，动态语言的体现import socketprint(socket.socket)print("After monkey patch")from gevent import monkeymonkey.patch_socket()print(socket.socket)import selectprint(select.select)monkey.patch_select()print("After monkey patch")print(select.select)#from __future__ import absolute_import# 当前路径下有个string.py包；# 在python2.4之前，如果你在main.py下导入string的时候，系统会检查当前路径有没有string.py，若有，则导入;# 如果我们想使用的是系统的string.py，则需要使用该方法，import string则导入系统的string；# 而from pkg import string 则是导入自定义的string#monkey_patch 猴子补丁# urllib 转urllib3 扩展包的时候，要将之前的属性和方法全部转成新属性，每个文件都改比较费劲，用monkey_patch打补丁# def extract_from_urllib3():#     util.ssl.sslContext = orig_util_sslcontext#     util.ssl.IS_PYOPENSSL = False# 会将之前的属性替换掉，省的每个文件都改import timeprint(time.time())def _time():    return  '1234'time.time = _timeprint(time.time())print('==================')