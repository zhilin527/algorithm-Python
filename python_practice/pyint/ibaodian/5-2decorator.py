#import timeclass Printing():    @staticmethod    def print_str(a=None,b=None):        if a is not None and b is not None:            print(str(a) + str(b))        elif b is None:            print(a)Printing.print_str('==========函数装饰器============')def log_time(func):#接受一个函数作为参数    def _log(*args,**kwargs):        beg = time.time()        res = func(*args,**kwargs)        print('use time :{}'.format(time.time()-beg))        return res    return _log@log_time#装饰器语法糖def my_sleep():    time.sleep(1)my_sleep()#5gnr中用装饰器的地方#登录aau时，@retry_on_flag(maxtries,hookparams=,flag)def retry_on_flag(maxtries,hookparams=False,flag=False):    def dec(func):        def f2(*args,**kwargs):            result = func(*args,**kwargs)            return result            pass        return f2    return dec@retry_on_flag(3)def lginaau():    pass#只要用来设置重试登录Printing.print_str('==========类装饰器==============')#使用类装饰器比较方便实现装饰器参数class LogTime():    def __init__(self,use_int=False):        self.use_int = use_int    def __call__(self, func):        def _log(*args,**kwargs):            beg = time.time()            res = func(*args,**kwargs)            if self.use_int:                Printing.print_str('use time : ',int(time.time()-beg))            else:                Printing.print_str('use time : ',time.time()-beg)            return res        return _log@LogTime(True)def mysleep():    time.sleep(1)mysleep()