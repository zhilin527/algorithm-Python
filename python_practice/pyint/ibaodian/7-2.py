# 网络的七层模型：# 物理层，数据链路层，网络层，传输层，会话层，表示层，应用层### 物理层：为数据传输介质提供传输通路，比特流数据；中继器# 数据链路层：在通信实体之间建立链路传输，帧数据；网卡# 网络层：为数据在节点之间传输创建逻辑链路，并分组转发，分组数据，数据包；路由器，防火墙，IP# 传输层：提供应用程序之间逻辑通信，数据段；tcp，udp# 会话层：进行会话管理的，验证和断点续传# 表示层：数据格式转换，加密和压缩# 应用层：访问网络服务的接口，http ssh telnet# 浏览器输入url过程：# 1，DNS，DNS缓存，DNS查询，DNS查询是递归的，没查到就到域名服务期，等上层查询，查到后获得IP# 2。浏览器调用socket进行TCP握手进行连接# 3。http请求，# 4，代理Nginx，访问量比较高的进行负载均衡# 5，uwsgi，兼容web应用的# 6，web app相应，web框架。发一些消息，或者是DB的一些操作# 7，TCP挥手# 三次握手：# 客户端和服务端三次数据包的交换建立TCP链接的过程：# 客户端发送请求链接的数据包给服务端，将自身的SYN置为1，数据包为Seq=M#     服务端回数据包，自身SYN，ACK置为1，数据包是ACK=M+1，Seq=N#     客户端回数据包，ACK置为1，数据包为ACK=N+1，Seq=M+1# 四次挥手：# 客户端发送数据包，FIN置为1，Seq=X# 服务端回数据包，ACK置为1，ACKNum=X+1# 服务端再发送数据包，FIN置为1，Seq=Y# 客户端回数据包，ACK置为1，ACKNum=Y+1# TCP UDP区别及应用场景：# TCP面向链接，UDP面向非链接# TCP是发送字节流，UDP是发送数据包# TCP是一对一的，UDP可以多对多# TCP提供可靠，不丢失，按序到达；UDP不保证可靠，顺序，可能丢包# TCP 协议如何保证可靠传输：# # 1。确认和重传，接收方接收到数据就会确认，发送方发送一段时间后没有收到确认就重传，通过滑动窗口实现的# # 2。数据校验# # 3。流量控制：当接受来不及处理发送方的数据，就提示发送方降低发送速率，防止包丢失# # 4。拥塞控制：当网络拥塞时，减少数据的发送# 应用场景：# UDP需要的资源少，所以快，延迟地，场景：直播，视频# TCP正确，可靠，场景：文字，文件传输# 排序：快排：#先通过partition找到小于界点值部分，大于界点值部分，等于界点值部分，分别对小于，大于的进行排序#partition：先规定less，more，cur三个下表指针，less=l-1；more=r+1；cur=l#循环while cur<more,进行循环。界点值一般取最后一个，或者随机；#   循环里面，如果当前cur值<界点值，cur值和less值交换，cur++，less++#         如果当前cur值>界点值，cur值和more值交换，more下标--#         如果cur值==界点值，cur++#最后partition返回的是less-more两个下表##很多机型，有的机型这种链接方式，还有没一条功能前台命令不一样，很多前台命令#契约执行，将前台命令和执行过程，对机型的选择适配，通信协议的选择进行分开，# 将前台命令及命令的格式，返回值要求，等待时间写在单独的模块中，执行，判断的过程，对机型的选择适配等整体封装，然后#根据调用的命令进行动态加载。然后去执行。#还有就是用了一些装饰器##http 响应状态码#1**。服务器收到请求，需要请求者继续执行操作#2**。成功。#3**。重定向，需要进一步操作完成请求# 301，永久重定向；# 302临时重定向；# 304 not modified资源没改，资源不会在响应主体中返回#4**。客户端错误。请求有语法错误或者无法完成请求。# 403 forbidden#5**。服务端错误。服务器在处理请求的过程中发生错误#幂等性#a=4就是幂等的，多次请求结果和请求一次结果一样；安全指的是是否会修改数据#幂等方法：#HTTP长链接，Connection：Keep-alive#如何区分不同的HTTP请求？Content-Length|Transfer-Encoding：chunked#查看http的字段，使用pip install httpie抓取#http -v baidu.com 查看请求字段；响应字段#http -f POST baidu.com hello=world -v#http协议组成：# 1。状态行# 2。请求头# 3。消息主体###请求头；# GET / HTTP/1.1    #请求方法，路径，版本# Accept: */*# Accept-Encoding: gzip, deflate# Connection: keep-alive# Host: baidu.com# User-Agent: HTTPie/2.0.0# POST / HTTP/1.1# Accept: */*# Accept-Encoding: gzip, deflate# Connection: keep-alive# Content-Length: 11# Content-Type: application/x-www-form-urlencoded; charset=utf-8# Host: baidu.com# User-Agent: HTTPie/2.0.0## hello=world### 响应头；## HTTP/1.1 200 OK# Accept-Ranges: bytes# Cache-Control: max-age=86400# Connection: Keep-Alive# Content-Length: 81# Content-Type: text/html# Date: Wed, 08 Apr 2020 14:03:32 GMT# ETag: "51-47cf7e6ee8400"# Expires: Thu, 09 Apr 2020 14:03:32 GMT# Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT# Server: Apache## <html># <meta http-equiv="refresh" content="0;url=http://www.baidu.com/"># </html>#####