#类变量，实例变量#classmethod,staticmethod#class Printing():    @staticmethod    def print_str(a=None,b=None):        if a is not None and b is not None:            print(str(a) + str(b))        elif b is None:            print(a)class Person:    Country = 'china'    def __init__(self,name):        self.name = name    @classmethod    def print_country(cls):        print(cls.Country)    @staticmethod    def join_name(first_name,last_name):        return first_name+last_name#classmethod是为了使用类变量,可以使用类属性，通过cls.属性#staticmethod是代码组织的需要，完全可以放在类外面，类名.属性，使用类属性，在类内部无法使用类普通方法；# 但是静态方法中可以通过传cls，cls()来实例化一个对象print('=================metaclass元类===============')#元类，什么是元类？#元类是创建类的类#1。元类允许我们控制类的生成，比如修改类的属性等#2。使用type来定义元类#3。元类最常用的使用场景就是ORM框架class PositiveInteger(int):    def __init__(self,value):#类实例初始化的时候        super().__init__()    ##继承int实现正数整数，，发现__init__方法实现不了；但是__new__()方法可以实现    def __new__(cls, value):#创建类实例的时候，先于__init__        return super().__new__(cls,abs(value))i = PositiveInteger(-3)Printing.print_str(i)print('===============singleton=================')#用__new__实现单例模式class singleton(object):    def __new__(cls,*args,**kwargs):        #每次返回同一个instance        if not hasattr(cls,'instance'):            cls.instance = super().__new__(cls,*args,**kwargs)        Printing.print_str(cls.instance)        return cls.instanceobj1 = singleton()obj2 = singleton()obj1.attr1 = 'value1'Printing.print_str(obj1.attr1,obj2.attr1)Printing.print_str(obj1 is obj2)Printing.print_str(singleton.instance)