# -*- coding: UTF-8 -*-#实现单例模式#python本身的模块一旦导入，就是单例#装饰器实现def Singleton(cls):    _instance = {}    def _singleton(*args, **kargs):        if cls not in _instance:            _instance[cls] = cls(*args, **kargs)        return _instance[cls]    return _singleton#实现__new__方法class singleton(object):    def __new__(cls,*args,**kwargs):        #每次返回同一个instance        if not hasattr(cls,'instance'):            cls.instance = super().__new__(cls,*args,**kwargs)        print(cls.instance)        return cls.instanceobj1 = singleton()obj2 = singleton()#使用元类#装饰器模式#代理模式#*# 5GNR中工厂模式的应用：# RF三层：app_service;domain;instructure# app_service提供接口# domain工厂类 domainRepositry domainFactory反射# instructure底层基础实现类# instructure层有devices，aau,meters,ssh，deviceFacorty，channelFactory# 底层有strctureRepositry，kw形式存储了每个可控对象# domainRepositry-createdomainobj-domainFactory-structure层的reflection创建底层对象实例，## 工厂类根据入参动态加载调用底层的各个模块创建对象######### *#class DogToy():    def speak(self):        print('wang wang')class CatToy():    def speak(self):        print('miao miao')def to_factory(toy_type):    if toy_type=='dog':        return DogToy()    elif toy_type=='cat':        return CatToy()