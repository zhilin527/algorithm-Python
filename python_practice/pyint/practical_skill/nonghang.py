# -*- coding: UTF-8 -*-def getThreeShift(num):    '''    三进制表示火星文：数字0，1，2分别对应字符@,$,&。输入数字123，输出字符串“$$$&@”（即11120）    输入：123    输出："$$$&@"    :param num:    :return:    '''    d={0:'@',1:'$',2:'&'}     res = []    quotient = num    while quotient:        remainder = quotient % 3        quotient = quotient // 3        res.append(d[remainder])    res.reverse()    return ''.join(res)print(getThreeShift(123))def get_index(coordinate):    '''    在二维平面上有 k（0~k-1） 个点，请找出这 k 个点中离质心最近点的编号。质心：横纵坐标为所有点的均值    输入：["1,1", "2,2", "1,2", "1,3"]    输出：2    :return:    '''    coordinate1 = coordinate[0]    coordinate2 = coordinate[1]    coordinate3 = coordinate[2]    coordinate4 = coordinate[3]    x1,y1 = getXY(coordinate1)    x2,y2 = getXY(coordinate2)    x3,y3 = getXY(coordinate3)    x4,y4 = getXY(coordinate4)    averX = (x1 + x2 + x3 + x4) / 4    averY = (y1 + y2 + y3 + y4) / 4    dist1 = getDistance(x1,y1,averX,averY)    dist2 = getDistance(x2,y2,averX,averY)    dist3 = getDistance(x3,y3,averX,averY)    dist4 = getDistance(x4,y4,averX,averY)    distList = []    distList.append(dist1)    distList.append(dist2)    distList.append(dist3)    distList.append(dist4)    min = distList[0]    min_index=0    for i in range(len(distList)):        if distList[i]<min:            min = distList[i]            min_index = i    return min_indexdef getXY(co):    x, y = co.split(',')    x = int(x)    y = int(y)    return (x,y)def getDistance(x,y,averX,averY):    distance = (x-averX)**2 + (y-averY)**2    return distanceprint(get_index(["1,1", "2,2", "1,2", "1,3"]))print(get_index(["1,1", "1,2", "1,3", "2,2"]))def getPokerOrder(cards):    '''    一副扑克牌中的牌面分为 5 种花色：大小鬼、黑桃、红桃、梅花、方块，分别用 k、s、h、p、q 表示这五种花色，    同时牌面采用 1~13 之间的数字表示同一花色中的大小（小鬼-1，大鬼-2）。    某扑克牌游戏中，一个玩家拿到了 12 张扑克牌，请按照如下规则对该玩家的牌进行排序，返回排序结果。    首先按照大小鬼、、黑桃、红桃、梅花、方块进行花色排序；    然后再对同一花色中的扑克牌按照数字从小到大排序。    输入：["s1", "s3", "s9", "s4", "h1", "p3", "p2", "q5", "q4", "q9", "k2", "k1"]    输出：["k1", "k2", "s1", "s3", "s4", "s9", "h1", "p2", "p3", "q4", "q5", "q9"]    :return:    '''    help_str = 'kshpq'    dic = {}    res = []    for c in cards:        if c[0] not in dic:            dic[c[0]] = []        dic[c[0]].append(c)    for i in range(len(help_str)):        if dic.get(help_str[i]):            dic.get(help_str[i]).sort(key=lambda s:int(s[1:]))            res.extend(dic.get(help_str[i]))    return resprint(getPokerOrder(["s1", "s3", "s9", "s4", "h1", "p3", "p2", "q5", "q4", "q9", "k2", "k1"]))def is_prime_and_palid(start,end):    '''    判断start，end之间是否有回文素数    :param start:    :param end:    :return:    '''    def is_prime(n):        return n>1 and all(n%i for i in range(2,int(n**0.5) + 1))    def reverse(n):        res=0        while n:            res = 10*res + n%10            n//=10        return res    resNum=0    res=[]    for N in range(start,end+1):        if N==reverse(N) and is_prime(N):            resNum+=1            res.append(N)    return resNum,resresNum,res = is_prime_and_palid(1,100)print(resNum,res)