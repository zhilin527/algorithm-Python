# -*- coding: UTF-8 -*-import threading# python实现单例模式的几种方法：# 1.装饰器def Singleton(cls):    _instance = {}    def _singleton(*args,**kwargs):        if cls not in _instance:            _instance[cls] = cls(*args,**kwargs)        return _instance[cls]    return _singleton@Singletonclass A(object):    a = 1    def __init__(self,x = 0):        self.x = x# 2.基础__new__方法实现class Singleton(object):    _instance_lock = threading.Lock()    def __init__(self):        pass    def __new__(cls, *args, **kwargs):        if not hasattr(cls,'_instance'):            with cls._instance_lock:                if not hasattr(cls,'_instance'):                    cls._instance = object.__new__(cls)        return  cls._instance# 3.基于metaclass方式实现class SingletonType(type):    _instance_lock = threading.Lock()    def __call__(cls, *args, **kwargs):        if not hasattr(cls, "_instance"):            with SingletonType._instance_lock:                if not hasattr(cls, "_instance"):                    cls._instance = super(SingletonType,cls).__call__(*args, **kwargs)        return cls._instanceclass Foo(metaclass=SingletonType):    def __init__(self,name):        self.name = nameif __name__ == '__main__':    # a1 = A(2)    # a2 = A(3)    # print(id(a1)==id(a2))    # print(a1.x,a1.a,a2.x,a2.a)    # def task(arg):    #     obj = Singleton()    #     print(id(obj))    # for i in range(10):    #     t = threading.Thread(target=task,args=[i,])    #     t.start()    foo1 = Foo('zhang')    foo2 = Foo('lin')    print(id(foo1) == id(foo2))